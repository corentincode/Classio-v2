generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  password                String
  role                    Role                      @default(ELEVE)
  resetToken              String?
  resetTokenExpiry        DateTime?
  lastLogin               DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  twoFactorEnabled        Boolean                   @default(false)
  twoFactorCode           String?
  twoFactorCodeExpiry     DateTime?
  establishmentId         String?
  name                    String?
  recordedAttendance      AttendanceRecord[]        @relation("TeacherRecorded")
  attendanceRecords       AttendanceRecord[]        @relation("StudentAttendance")
  conversationParticipant ConversationParticipant[]
  taughtCourses           Course[]
  teachingAt              EstablishmentProfessor[]
  createdEvaluations      Evaluation[]              @relation("TeacherCreatedEvaluation")
  gradedBy                Grade[]                   @relation("TeacherGraded")
  studentGrades           Grade[]                   @relation("StudentGrades")
  sentMessages            Message[]
  children                ParentChild[]
  parentOf                ParentChild[]             @relation("ParentToChild")
  studentClasses          StudentClass[]
  establishment           Establishment?            @relation("UserEstablishment", fields: [establishmentId], references: [id])
}

model Establishment {
  id           String                   @id @default(cuid())
  name         String
  code         String                   @unique
  address      String?
  city         String?
  zipCode      String?
  country      String?
  phone        String?
  email        String?
  website      String?
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  classes      Class[]
  professors   EstablishmentProfessor[]
  periodConfig PeriodConfig[]
  users        User[]                   @relation("UserEstablishment")
}

model EstablishmentProfessor {
  id              String        @id @default(cuid())
  professorId     String
  establishmentId String
  createdAt       DateTime      @default(now())
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  professor       User          @relation(fields: [professorId], references: [id], onDelete: Cascade)

  @@unique([professorId, establishmentId])
}

model Class {
  id              String         @id @default(cuid())
  name            String
  level           String
  section         String?
  schoolYear      String
  description     String?
  maxStudents     Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  establishmentId String
  establishment   Establishment  @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  courses         Course[]
  students        StudentClass[]

  @@unique([name, establishmentId, schoolYear])
}

model StudentClass {
  id             String   @id @default(cuid())
  studentId      String
  classId        String
  enrollmentDate DateTime @default(now())
  status         String   @default("active")
  class          Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
}

model Course {
  id                String             @id @default(cuid())
  name              String
  description       String?
  color             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  classId           String
  professorId       String
  coefficient       Float              @default(1.0)
  attendanceRecords AttendanceRecord[]
  class             Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  professor         User               @relation(fields: [professorId], references: [id])
  evaluations       Evaluation[]
  sessions          Session[]

  @@unique([name, classId, professorId])
}

model Session {
  id                String             @id @default(cuid())
  title             String?
  description       String?
  dayOfWeek         Int
  startTime         DateTime
  endTime           DateTime
  recurrent         Boolean            @default(true)
  room              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  courseId          String
  attendanceRecords AttendanceRecord[]
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model ParentChild {
  id           String   @id @default(cuid())
  parentId     String
  childId      String
  relationship String?
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())
  child        User     @relation(fields: [childId], references: [id], onDelete: Cascade)
  parent       User     @relation("ParentToChild", fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([parentId, childId])
}

model AttendanceRecord {
  id                String           @id @default(cuid())
  date              DateTime
  status            AttendanceStatus
  minutesLate       Int?
  reason            String?
  excuseNote        String?
  excuseDocumentUrl String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  studentId         String
  recordedById      String
  courseId          String
  sessionId         String?
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  recordedBy        User             @relation("TeacherRecorded", fields: [recordedById], references: [id])
  session           Session?         @relation(fields: [sessionId], references: [id])
  student           User             @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, date])
}

model PeriodConfig {
  id              String        @id @default(cuid())
  period          Period
  name            String
  startDate       DateTime
  endDate         DateTime
  schoolYear      String
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  establishmentId String
  evaluations     Evaluation[]
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@unique([period, schoolYear, establishmentId])
}

model Evaluation {
  id          String         @id @default(cuid())
  title       String
  description String?
  type        EvaluationType
  date        DateTime
  maxGrade    Float          @default(20.0)
  coefficient Float          @default(1.0)
  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  courseId    String
  createdById String
  periodId    String?
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdBy   User           @relation("TeacherCreatedEvaluation", fields: [createdById], references: [id])
  period      PeriodConfig?  @relation(fields: [periodId], references: [id])
  grades      Grade[]
}

model Grade {
  id           String     @id @default(cuid())
  value        Float
  comment      String?
  isAbsent     Boolean    @default(false)
  isExcused    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  studentId    String
  evaluationId String
  gradedById   String
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  gradedBy     User       @relation("TeacherGraded", fields: [gradedById], references: [id])
  student      User       @relation("StudentGrades", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, evaluationId])
}

model Conversation {
  id            String                    @id @default(cuid())
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  title         String?
  isGroup       Boolean                   @default(false)
  lastMessageAt DateTime                  @default(now())
  participants  ConversationParticipant[]
  messages      Message[]

  @@index([lastMessageAt])
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversationId String
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  files          Files[]

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

model Files {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Int
  url       String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  messageId String?
  Message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

enum Role {
  ELEVE
  PARENT
  ADMINISTRATION
  SUPERADMIN
  PROFESSEUR
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum EvaluationType {
  CONTROLE
  DEVOIR
  EXAMEN
  TP
  ORAL
  PROJET
  AUTRE
}

enum Period {
  TRIMESTRE_1
  TRIMESTRE_2
  TRIMESTRE_3
  SEMESTRE_1
  SEMESTRE_2
  ANNEE
}
