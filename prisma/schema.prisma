datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ELEVE
  PARENT
  ADMINISTRATION
  PROFESSEUR
  SUPERADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum EvaluationType {
  CONTROLE
  DEVOIR
  EXAMEN
  TP
  ORAL
  PROJET
  AUTRE
}

enum Period {
  TRIMESTRE_1
  TRIMESTRE_2
  TRIMESTRE_3
  SEMESTRE_1
  SEMESTRE_2
  ANNEE
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String?
  role              Role      @default(ELEVE)
  resetToken        String?
  resetTokenExpiry  DateTime?
  lastLogin         DateTime?
  twoFactorEnabled  Boolean   @default(false)
  twoFactorCode     String?   // Code à 6 chiffres envoyé par email
  twoFactorCodeExpiry DateTime? // Date d'expiration du code
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relation with establishments
  establishment     Establishment? @relation(name: "UserEstablishment", fields: [establishmentId], references: [id])
  establishmentId   String?
  
  // For professors who can teach at multiple schools
  teachingAt        EstablishmentProfessor[]

  // Relations for class management
  studentClasses    StudentClass[]
  taughtCourses     Course[]
  
  // Relations for parents
  children          ParentChild[]
  parentOf          ParentChild[]  @relation("ParentToChild")
  
  // Relations for attendance
  attendanceRecords AttendanceRecord[] @relation("StudentAttendance")
  recordedAttendance AttendanceRecord[] @relation("TeacherRecorded")
  
  // Relations for grades
  studentGrades     Grade[] @relation("StudentGrades")
  gradedBy          Grade[] @relation("TeacherGraded")
  createdEvaluations Evaluation[] @relation("TeacherCreatedEvaluation")

  sentMessages           Message[]
  conversationParticipant ConversationParticipant[]
}

model Establishment {
  id          String      @id @default(cuid())
  name        String
  code        String      @unique
  address     String?
  city        String?
  zipCode     String?
  country     String?
  phone       String?
  email       String?
  website     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  users       User[]      @relation(name: "UserEstablishment")
  professors  EstablishmentProfessor[]
  
  // Classes in this establishment
  classes     Class[]
  
  // Periods configuration
  periodConfig PeriodConfig[]
}

// Join table for many-to-many relationship between professors and establishments
model EstablishmentProfessor {
  id              String        @id @default(cuid())
  professor       User          @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId     String
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  establishmentId String
  createdAt       DateTime      @default(now())
  
  @@unique([professorId, establishmentId])
}

// New models for class management

model Class {
  id              String        @id @default(cuid())
  name            String        // e.g., "6ème A", "Terminale S2"
  level           String        // e.g., "6ème", "Terminale"
  section         String?       // e.g., "A", "S2"
  schoolYear      String        // e.g., "2023-2024"
  description     String?
  maxStudents     Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relation with establishment
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  establishmentId String
  
  // Relations
  students        StudentClass[]
  courses         Course[]
  
  @@unique([name, establishmentId, schoolYear])
}

model StudentClass {
  id              String        @id @default(cuid())
  student         User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       String
  class           Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId         String
  enrollmentDate  DateTime      @default(now())
  status          String        @default("active") // active, inactive, graduated, etc.
  
  @@unique([studentId, classId])
}

model Course {
  id              String        @id @default(cuid())
  name            String        // e.g., "Mathématiques", "Histoire-Géographie"
  description     String?
  color           String?       // For UI display in schedule
  coefficient     Float         @default(1.0) // Coefficient for grade calculation
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  class           Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId         String
  professor       User          @relation(fields: [professorId], references: [id])
  professorId     String
  sessions        Session[]
  
  // Relation for attendance
  attendanceRecords AttendanceRecord[]
  
  // Relation for evaluations
  evaluations     Evaluation[]
  
  @@unique([name, classId, professorId])
}

model Session {
  id              String        @id @default(cuid())
  title           String?
  description     String?
  dayOfWeek       Int           // 0-6 (Sunday to Saturday)
  startTime       DateTime
  endTime         DateTime
  recurrent       Boolean       @default(true)
  room            String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relation with course
  course          Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId        String
  
  // Relation for attendance
  attendanceRecords AttendanceRecord[]
}

// Model for parent-child relationships
model ParentChild {
  id              String        @id @default(cuid())
  parent          User          @relation("ParentToChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId        String
  child           User          @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId         String
  relationship    String?       // e.g., "father", "mother", "guardian"
  isPrimary       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  
  @@unique([parentId, childId])
}

// New model for attendance management
model AttendanceRecord {
  id              String           @id @default(cuid())
  date            DateTime
  status          AttendanceStatus
  minutesLate     Int?             // For late status, how many minutes late
  reason          String?          // Reason for absence or lateness
  excuseNote      String?          // Note for excused absences
  excuseDocumentUrl String?        // URL to uploaded excuse document
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  student         User             @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)
  studentId       String
  recordedBy      User             @relation("TeacherRecorded", fields: [recordedById], references: [id])
  recordedById    String
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId        String
  session         Session?         @relation(fields: [sessionId], references: [id])
  sessionId       String?
  
  @@unique([studentId, courseId, date])
}

// New models for grades and evaluations

model PeriodConfig {
  id              String        @id @default(cuid())
  period          Period
  name            String        // Custom name for the period
  startDate       DateTime
  endDate         DateTime
  schoolYear      String        // e.g., "2023-2024"
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relation with establishment
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  establishmentId String
  
  // Relation with evaluations
  evaluations     Evaluation[]
  
  @@unique([period, schoolYear, establishmentId])
}

model Evaluation {
  id              String        @id @default(cuid())
  title           String
  description     String?
  type            EvaluationType
  date            DateTime
  maxGrade        Float         @default(20.0)
  coefficient     Float         @default(1.0)
  isPublished     Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  course          Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId        String
  createdBy       User          @relation("TeacherCreatedEvaluation", fields: [createdById], references: [id])
  createdById     String
  period          PeriodConfig? @relation(fields: [periodId], references: [id])
  periodId        String?
  
  // Relation with grades
  grades          Grade[]
}

model Grade {
  id              String        @id @default(cuid())
  value           Float
  comment         String?
  isAbsent        Boolean       @default(false)
  isExcused       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  student         User          @relation("StudentGrades", fields: [studentId], references: [id], onDelete: Cascade)
  studentId       String
  evaluation      Evaluation    @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluationId    String
  gradedBy        User          @relation("TeacherGraded", fields: [gradedById], references: [id])
  gradedById      String
  
  @@unique([studentId, evaluationId])
}

model Conversation {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  title         String?
  isGroup       Boolean   @default(false)
  lastMessageAt DateTime  @default(now())
  
  messages      Message[]
  participants  ConversationParticipant[]

  @@index([lastMessageAt])
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversationId String
  senderId       String
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}
